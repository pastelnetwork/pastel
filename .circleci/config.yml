# Use the latest 2.1 version of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference
orbs:
  go: circleci/go@1.5.0
  aws-cli: circleci/aws-cli@2.0.3
  aws-s3: circleci/aws-s3@3.0.0
version: 2.1
executors:
  pastel-builder:
    docker:
      - image: akobrin/pastel:0.0.2
commands:
  upload-s3:
    parameters:
      root_directory:
        type: string
        default: /pastel
      platform:
        type: string
        description: Build platform. Must be one of the "linux", "darwin", "windows"
      platform_suffix:
        type: string
        default: ""
        description: Suffix to use in package filename for the current platform.
      ext:
        type: string
        default: ""
        description: executable file extension, should be defined as .exe only for Windows
    steps:
      - run:
          name: Prepare archive for AWS (<< parameters.platform >>)
          working_directory: << parameters.root_directory >>
          command: |
            reldir="<< parameters.platform >>-release"
            echo "<< parameters.platform >> release directory: $reldir"
            mkdir -p "$reldir"
            cp src/{pasteld<< parameters.ext >>,pastel-cli<< parameters.ext >>} "$reldir/"
            cd "$reldir" && zip pastel-<< parameters.platform_suffix >>-amd64.zip *
            ls -l
      - aws-cli/setup:
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
      - aws-s3/copy:
          from: << parameters.root_directory >>/<< parameters.platform >>-release/pastel-<< parameters.platform_suffix >>-amd64.zip
          to: s3://$ROOT_BUCKET_NAME/pasteld/pastel-<< parameters.platform_suffix >>-amd64.zip
          arguments: |
            --acl public-read \
            --cache-control "max-age=86400"
      - run: aws cloudfront create-invalidation --distribution-id $CLOUDFRONT_ID --paths /beta/pasteld/\* 
  
  github-upload:
    parameters:
      root_directory:
        type: string
        default: /pastel
      binaryName:
        type: string
      ext:
        type: string
        default: ""
        description: executable file extension, should be defined as .exe only for Windows
      platform:
        type: string
        description: Build platform. Must be one of the "linux", "darwin", "windows"
    steps:
      - run:
          name: Uploading executables to Pastel GitHub repo (<< parameters.platform >>)
          working_directory: << parameters.root_directory >>
          command: |
            wget https://github.com/github-release/github-release/releases/download/v0.10.0/linux-amd64-github-release.bz2
            bzip2 -d ./linux-amd64-github-release.bz2
            mv linux-amd64-github-release github-release
            chmod u+r+x github-release
            export EXPORT_ARTIFACT=src/<< parameters.binaryName >><< parameters.ext >>
            echo "Check existence of [${EXPORT_ARTIFACT}] build and upload to GitHub, tag ${CIRCLE_TAG}"
            if test -z "${CIRCLE_TAG}"; then
               echo "Git tag is not defined"
               exit 1
            fi
            if test ! -f "$EXPORT_ARTIFACT"; then
               echo "Artifact [$EXPORT_ARTIFACT] not found"
               exit 2
            fi
            echo ./github-release --verbose upload --user pastelnetwork --repo pastel --tag $CIRCLE_TAG --name << parameters.binaryName >>-<< parameters.platform >>-amd64 --file $EXPORT_ARTIFACT
            ./github-release --verbose upload --user pastelnetwork --repo pastel --tag $CIRCLE_TAG --name << parameters.binaryName >>-<< parameters.platform >>-amd64 --file $EXPORT_ARTIFACT

jobs:
  build_platform:
    parameters:
      platform:
        type: string
        description: Build platform. Must be one of the "linux", "darwin", "windows"
      platform_suffix:
        type: string
        default: ""
        description: Suffix to use in package filename for the current platform. Define when deploy=true.
      host:
        default: ""
        type: string
        description: Host parameters to build on the specific platform. Must be one of the "", "x86_64-w64-mingw32", "x86_64-apple-darwin14"
      debug_mode:
        default: true
        type: boolean
        description: Enable/Disable debug mode
      static_code_analysis:
        default: false
        type: boolean
        description: Use PVS-Studio static code analyzer
      run_tests:
        default: false
        type: boolean
        description: Execute tests
      deploy:
        default: false
        type: boolean
        description: If true - deploy release to GitHub and AWS
      source_directory:
        type: string
        default: /pastel/src/
      ext:
        type: string
        default: ""
    executor: pastel-builder
    working_directory: /pastel
    resource_class: medium+
    steps:
      - checkout
      - run:
          name: Building Pastel Core (<< parameters.platform >> version)
          no_output_timeout: 30m
          command: |
            HOST=<<parameters.host>> ./build.sh -j2<<#parameters.debug_mode>> --enable-debug<</parameters.debug_mode>><<#parameters.static_code_analysis>> --enable-pvs<</parameters.static_code_analysis>>
      - when:
          condition:
            and:
              - equal: [ true, << parameters.static_code_analysis >> ]
              - equal: [ true, << parameters.debug_mode >> ]
          steps:
            - run:
                name: Static code analysis
                working_directory: /pastel
                no_output_timeout: 10m
                command: |
                  ./pcutil/static_code_analysis.py -p $TEST_MAILBOX_PWD -e $PVS_EMAIL -n $PVS_SERIAL -j 3
            - store_artifacts:
                path: /pastel/pcutil/artifacts
      - store_artifacts:
          path: <<parameters.source_directory>>pasteld<<parameters.ext>>
          destination: /<<parameters.platform>>/pasteld<<parameters.ext>>
      - store_artifacts:
          path: <<parameters.source_directory>>pastel-cli<<parameters.ext>>
          destination: /<<parameters.platform>>/pastel-cli<<parameters.ext>>
      - store_artifacts:
          path: <<parameters.source_directory>>pastel-tx<<parameters.ext>>
          destination: /<<parameters.platform>>/pastel-tx<<parameters.ext>>       
      - when:
          condition: << parameters.run_tests >>
          steps:
            - run:
                name: Fetching zkSNARK parameters
                working_directory: pcutil
                command: |
                  ./fetch-params.sh
            - run:
                name: Tests - util-test
                working_directory: qa/test-suite        
                command: |
                  ./full_test_suite.py util-test
            - run:
                name: Tests - secp256k1
                working_directory: qa/test-suite
                command: |
                  ./full_test_suite.py secp256k1
            - run:
                name: Tests - univalue
                working_directory: qa/test-suite
                command: |
                  ./full_test_suite.py univalue
            - run:
                name: Caching files for running tests
                command: |
                  mkdir -p /pasteld-files/src
                  cp src/{pastel-cli,pasteld,pastel-gtest,pastel-tx} /pasteld-files/src
                  cp -r qa/ /pasteld-files/
                  cp -r $HOME/.pastel-params/ /pasteld-files/
          # Persist the specified paths into the workspace for use in test jobs.
            - persist_to_workspace:
              # Must be an absolute path, or relative path from working_directory. This is a
              # directory on the container which is taken to be the root directory of the workspace
                root: /pasteld-files
                paths:
                  - .pastel-params
                  - src
                  - qa
      - when:
          condition: << parameters.deploy >>
          steps:
            - github-upload:
                binaryName: pasteld
                ext: << parameters.ext >>
                platform: << parameters.platform >>
            - github-upload:
                binaryName: pastel-cli
                ext: << parameters.ext >>
                platform: << parameters.platform >>
            - upload-s3:
                ext: << parameters.ext >>
                platform: << parameters.platform >>
                platform_suffix: << parameters.platform_suffix >>
  test_group_rpc_common:
    executor: pastel-builder    
    working_directory: /pastel
    steps:
      - attach_workspace:
          at: /tmp/ws
      - run:
          name: Setting up test environment
          command: |
            cp -r /tmp/ws/{src,qa}/ /pastel/
            cp -r /tmp/ws/.pastel-params $HOME/
            ls -la /pastel
      - run:
          name: Tests - gtest
          working_directory: qa/test-suite
          no_output_timeout: 30m
          command: |
            ./full_test_suite.py gtest
      - run:
          name: Tests - rpc-common
          working_directory: qa/test-suite
          no_output_timeout: 30m
          command: |
            ./full_test_suite.py rpc-common
      - run:
          name: Tests - rpc-ext
          working_directory: qa/test-suite
          no_output_timeout: 30m
          command: |
            ./full_test_suite.py rpc-ext
  test_group_mn:
    executor: pastel-builder    
    working_directory: /pastel
    steps:
      - attach_workspace:
          at: /tmp/ws
      - run:
          name: Setting up test environment
          command: |
            cp -r /tmp/ws/{src,qa}/ /pastel/
            cp -r /tmp/ws/.pastel-params $HOME/
      - run:
          name: Tests - rpc-mn
          working_directory: qa/test-suite
          no_output_timeout: 45m
          command: |
            export PYTHONUNBUFFERED=1
            ./full_test_suite.py rpc-mn
  test_group_mn_tickets:
    executor: pastel-builder    
    working_directory: /pastel
    steps:
      - attach_workspace:
          at: /tmp/ws
      - run:
          name: Setting up test environment
          command: |
            cp -r /tmp/ws/{src,qa}/ /pastel/
            cp -r /tmp/ws/.pastel-params $HOME/
      - run:
          name: Tests - rpc-mn-tickets
          working_directory: qa/pull-tester
          no_output_timeout: 30m
          command: |
            ./rpc-tests.sh --name=mn_tickets.py
workflows:
    version: 2
    PastelBuild:
      jobs:
        - build_platform:
            name: Build Pastel for Linux platform (debug)
            platform: linux
            static_code_analysis: false
            run_tests: true
            filters:
              tags:
                ignore: /^v.*/
        - build_platform:
            name: Build Pastel for Windows platform (debug)
            platform: windows
            host: x86_64-w64-mingw32
            ext: .exe
            filters:
              tags:
                ignore: /^v.*/
        - build_platform:
            name: Build Pastel for macOS platform (debug)
            platform: darwin
            host: x86_64-apple-darwin14
            filters:
              tags:
                ignore: /^v.*/
        - build_platform:
            name: Build Pastel for Linux platform (release)
            platform: linux
            platform_suffix: linux
            debug_mode: false
            deploy: true
            filters:
              branches:
                ignore: /.*/
              tags:
                only: /^v.*/
            context:
              - Release
              - weekly-beta-builds
        - build_platform:
            name: Build Pastel for Windows platform (release)
            platform: windows
            platform_suffix: win
            host: x86_64-w64-mingw32
            ext: .exe
            debug_mode: false
            deploy: true
            filters:
              branches:
                ignore: /.*/
              tags:
                only: /^v.*/
            context:
              - Release
              - weekly-beta-builds
        - build_platform:
            name: Build Pastel for macOS platform (release)
            platform: darwin
            platform_suffix: darwin
            host: x86_64-apple-darwin14
            debug_mode: false
            deploy: true
            filters:
              branches:
                ignore: /.*/
              tags:
                only: /^v.*/
            context:
              - Release
              - weekly-beta-builds
        - test_group_rpc_common:
            name: Tests (gtest,RPC common,ext) 
            requires:
              - Build Pastel for Linux platform (debug)
            filters:
              tags:
                ignore: /^v.*/
        - test_group_mn:
            name: Tests (MN fast)
            requires:
              - Build Pastel for Linux platform (debug)
            filters:
              tags:
                ignore: /^v.*/
        - test_group_mn_tickets:
            name: Tests (MN tickets)
            requires:
              - Build Pastel for Linux platform (debug)
            filters:
              tags:
                ignore: /^v.*/
