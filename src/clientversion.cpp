// Copyright (c) 2012-2014 The Bitcoin Core developers
// Copyright (c) 2018-2024 The Pastel Core developers
// Distributed under the MIT software license, see the accompanying
// file COPYING or https://www.opensource.org/licenses/mit-license.php.
#include <string>
#include <sstream>

#include <utils/tinyformat.h>
#include <utils/vector_types.h>
#include <clientversion.h>

using namespace std;

/**
 * Name of client reported in the 'version' message. Report the same name
 * for both bitcoind and bitcoin-core, to make it harder for attackers to
 * target servers or GUI users specifically.
 */
const string CLIENT_NAME("MagicBean");

/**
 * Client version number
 */
#define CLIENT_VERSION_SUFFIX ""


/**
 * The following part of the code determines the CLIENT_BUILD variable.
 * Several mechanisms are used for this:
 * * first, if HAVE_BUILD_INFO is defined, include build.h, a file that is
 *   generated by the build environment, possibly containing the output
 *   of git-describe in a macro called BUILD_DESC
 * * secondly, if this is an exported version of the code, GIT_ARCHIVE will
 *   be defined (automatically using the export-subst git attribute), and
 *   GIT_COMMIT will contain the commit id.
 * * then, three options exist for determining CLIENT_BUILD:
 *   * if BUILD_DESC is defined, use that literally (output of git-describe)
 *   * if not, but GIT_COMMIT is defined, use v[maj].[min].[rev].[build]-g[commit]
 *   * otherwise, use v[maj].[min].[rev].[build]-unk
 * finally CLIENT_VERSION_SUFFIX is added
 */

//! First, include build.h if requested
#ifdef HAVE_BUILD_INFO
#include "build.h"
#endif

//! git will put "#define GIT_ARCHIVE 1" on the next line inside archives. $Format:%n#define GIT_ARCHIVE 1$
#ifdef GIT_ARCHIVE
#define GIT_COMMIT_ID "$Format:%h$"
#define GIT_COMMIT_DATE "$Format:%cD$"
#endif

#ifndef BUILD_DATE
#ifdef GIT_COMMIT_DATE
#define BUILD_DATE GIT_COMMIT_DATE
#else
#define BUILD_DATE __DATE__ ", " __TIME__
#endif
#endif

const string CLIENT_DATE(BUILD_DATE);

string RenderBuildString(const int nBuild)
{
    string sBuildString;
    if (nBuild < 25)
        sBuildString = strprintf("-beta%d", nBuild + 1);
    else if (nBuild < 50)
        sBuildString = strprintf("-rc%d", nBuild - 24);
    else if (nBuild > 50)
		sBuildString = strprintf("-%d", nBuild - 50);
	return sBuildString;
}

string BuildDescription(const int nMajor, const int nMinor, const int nRevision, const int nBuild)
{
	stringstream description;
    description << "v" << nMajor << "." << nMinor << "." << nRevision << RenderBuildString(nBuild);
#ifdef BUILD_SUFFIX
	description << "-" << STRINGIZE(BUILD_SUFFIX);
#elif defined(GIT_COMMIT_ID)
    description << "-g" << STRINGIZE(GIT_COMMIT_ID);
#else
    description << "-unk";
#endif
    description << CLIENT_VERSION_SUFFIX;
    return description.str();
}

const string CLIENT_BUILD = BuildDescription(CLIENT_VERSION_MAJOR, CLIENT_VERSION_MINOR, CLIENT_VERSION_REVISION, CLIENT_VERSION_BUILD);

string FormatVersion(int nVersion)
{
    if (nVersion % 100 < 25)
        return strprintf("%d.%d.%d-beta%d", nVersion / 1000000, (nVersion / 10000) % 100, (nVersion / 100) % 100, (nVersion % 100)+1);
    if (nVersion % 100 < 50)
        return strprintf("%d.%d.%d-rc%d", nVersion / 1000000, (nVersion / 10000) % 100, (nVersion / 100) % 100, (nVersion % 100)-24);
    else if (nVersion % 100 == 50)
        return strprintf("%d.%d.%d", nVersion / 1000000, (nVersion / 10000) % 100, (nVersion / 100) % 100);
    else
        return strprintf("%d.%d.%d-%d", nVersion / 1000000, (nVersion / 10000) % 100, (nVersion / 100) % 100, (nVersion % 100)-50);
}

string FormatFullVersion()
{
    return CLIENT_BUILD;
}

/** 
 * Format the subversion field according to BIP 14 spec (https://github.com/bitcoin/bips/blob/master/bip-0014.mediawiki) 
 */
string FormatSubVersion(const string& name, int nClientVersion, const v_strings& comments)
{
    ostringstream ss;
    ss << "/";
    ss << name << ":" << FormatVersion(nClientVersion);
    if (!comments.empty())
    {
        v_strings::const_iterator it(comments.begin());
        ss << "(" << *it;
        for(++it; it != comments.end(); ++it)
            ss << "; " << *it;
        ss << ")";
    }
    ss << "/";
    return ss.str();
}
