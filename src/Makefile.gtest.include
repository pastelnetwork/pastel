TESTS += pastel-gtest
noinst_PROGRAMS += pastel-gtest

RAW_GTEST_FILES = gtest/data/alertTests.raw

JSON_GTEST_FILES =\
	gtest/data/script_valid.json\
  	gtest/data/script_invalid.json\
	gtest/data/tx_invalid.json\
  	gtest/data/tx_valid.json\
	gtest/data/sighash.json\
	gtest/data/g1_compressed.json\
	gtest/data/g2_compressed.json\
	gtest/data/merkle_commitments.json\
	gtest/data/merkle_commitments_sapling.json\ 
	gtest/data/merkle_path.json\
	gtest/data/merkle_path_sapling.json\
	gtest/data/merkle_roots.json\
	gtest/data/merkle_roots_empty.json\
	gtest/data/merkle_roots_empty_sapling.json\
	gtest/data/merkle_roots_sapling.json\
	gtest/data/merkle_serialization.json\
	gtest/data/merkle_serialization_sapling.json\
	gtest/data/merkle_witness_serialization.json\
	gtest/data/merkle_witness_serialization_sapling.json\
	gtest/data/sapling_key_components.json

GENERATED_GTEST_FILES = $(JSON_GTEST_FILES:.json=.json.h) $(RAW_GTEST_FILES:.raw=.raw.h)

# tool for generating our public parameters.
# test_checktransaction.cpp MUST be before
# any test that calls SelectParams().
pastel_gtest_SOURCES = \
	gtest/pastel_gtest_main.cpp \
	gtest/pastel_gtest_main.h \
	gtest/pastel_gtest_utils.cpp \
	gtest/pastel_gtest_utils.h \
	gtest/test_checktransaction.cpp \
	gtest/json_test_vectors.cpp \
	gtest/json_test_vectors.h
# These tests are order-dependent, because they
# depend on global state (see #1539)
if ENABLE_WALLET
pastel_gtest_SOURCES += \
	wallet/gtest/test_wallet_zkeys.cpp
endif
pastel_gtest_SOURCES +=\
	gtest/test_mnode/mock_ticket.h\
	gtest/test_mnode/test_governance.cpp\
	gtest/test_mnode/test_mnode_rpc.cpp\
	gtest/test_mnode/test_pastel.cpp\
	gtest/test_mnode/test_pastelid.cpp\
	gtest/test_mnode/test_secure_container.cpp\
	gtest/test_mnode/test_ticket_mempool.cpp\
	gtest/test_mnode/test_ticket_mempool.h\
	gtest/test_mnode/test_ticket_mempool_processor.cpp\
	gtest/test_mnode/test_ticket_processor.cpp\
	gtest/test_addrman.cpp\
	gtest/test_alert.cpp\
	gtest/test_allocator.cpp\
	gtest/test_arith_uint256.cpp\
	gtest/test_base32.cpp\
	gtest/test_base58.cpp\
	gtest/test_base64.cpp\
	gtest/test_bech32.cpp\
	gtest/test_bip32.cpp\
	gtest/test_block.cpp\
	gtest/test_bloom.cpp\
	gtest/test_checkblock.cpp\
	gtest/test_checkpoints.cpp\
	gtest/test_circuit.cpp\
	gtest/test_coins.cpp\
	gtest/test_compress.cpp\
	gtest/test_convertbits.cpp\
	gtest/test_crypto.cpp\
	gtest/test_datacompressor.cpp\
	gtest/test_dbwrapper.cpp\
	gtest/test_deprecation.cpp\
	gtest/test_DoS.cpp\
	gtest/test_equihash.cpp\
	gtest/test_enum_util.cpp\
	gtest/test_getarg.cpp\
	gtest/test_hash.cpp\
	gtest/test_httprpc.cpp\
	gtest/test_keys.cpp\
	gtest/test_keystore.cpp\
	gtest/test_legroast.cpp\
	gtest/test_libzcash_utils.cpp\
	gtest/test_main.cpp\
	gtest/test_mempool.cpp\
	gtest/test_merkletree.cpp\
	gtest/test_metrics.cpp\
	gtest/test_miner.cpp\
	gtest/test_mruset.cpp\
	gtest/test_multisig.cpp\
	gtest/test_netbase.cpp\
	gtest/test_noteencryption.cpp\
	gtest/test_numeric_range.cpp\
	gtest/test_pedersen_hash.cpp\
	gtest/test_policyestimator.cpp\
	gtest/test_pmt.cpp\
	gtest/test_pow.cpp\
	gtest/test_prevector.cpp\
	gtest/test_proofs.cpp\
	gtest/test_raii_event.cpp\
	gtest/test_random.cpp\
	gtest/test_reverselock.cpp\
	gtest/test_rpc.cpp\
	gtest/test_rpccmd_parser.cpp\
	gtest/test_sanity.cpp\
	gtest/test_sapling_note.cpp\
	gtest/test_scheduler.cpp\
	gtest/test_script.cpp\
	gtest/test_scriptnum.cpp\
	gtest/test_script_P2SH.cpp\
	gtest/test_serialize.cpp\
	gtest/test_sha256compress.cpp\
	gtest/test_sighash.cpp\
	gtest/test_sigopcount.cpp\
	gtest/test_skiplist.cpp\
	gtest/test_str_encodings.cpp\
	gtest/test_str_utils.cpp\
	gtest/test_svc_thread.cpp\
	gtest/test_tautology.cpp\
	gtest/test_timedata.cpp\
	gtest/test_transaction.cpp\
	gtest/test_torcontrol.cpp\
	gtest/test_transaction_builder.cpp\
	gtest/test_trimmean.cpp\
	gtest/test_txid.cpp\
	gtest/test_uint256.cpp\
	gtest/test_univalue.cpp\
	gtest/test_upgrades.cpp\
	gtest/test_util.cpp\
	gtest/test_validation.cpp\
	gtest/test_zip32.cpp
	
if ENABLE_WALLET
pastel_gtest_SOURCES += \
	wallet/gtest/test_accounting.cpp\
	wallet/gtest/test_wallet.cpp\
	wallet/gtest/test_wallet_ismine.cpp\
	gtest/test_rpc_wallet.cpp
endif

pastel_gtest_CPPFLAGS = $(AM_CPPFLAGS) -DBINARY_OUTPUT -DCURVE_ALT_BN128 -DSTATIC $(BITCOIN_INCLUDES) -I$(srcdir)/gtest 
pastel_gtest_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS) -I$(srcdir)/gtest

pastel_gtest_LDADD =\
 -lgtest\
 -lgmock\
 $(LIBBITCOIN_SERVER)\
 $(LIBBITCOIN_CLI)\
 $(LIBBITCOIN_COMMON)\
 $(LIBBITCOIN_UTIL)\
 $(LIBBITCOIN_CRYPTO)\
 $(LIBUNIVALUE)\
 $(LIBLEVELDB)\
 $(LIBMEMENV)\
 $(BOOST_LIBS)\
 $(LIBSECP256K1)

if ENABLE_ZMQ
pastel_gtest_LDADD += $(LIBBITCOIN_ZMQ) $(ZMQ_LIBS)
endif
if ENABLE_WALLET
pastel_gtest_LDADD += $(LIBBITCOIN_WALLET)
endif

pastel_gtest_LDADD +=\
 $(LIBZCASH_CONSENSUS)\
 $(BDB_LIBS)\
 $(SSL_LIBS)\
 $(CRYPTO_LIBS)\
 $(EVENT_PTHREADS_LIBS)\
 $(EVENT_LIBS)\
 $(LIBZCASH)\
 $(LIBSNARK)\
 $(LIBZCASH_LIBS)\
 $(ZSTD_LIBS)

if ENABLE_PROTON
pastel_gtest_LDADD += $(LIBBITCOIN_PROTON) $(PROTON_LIBS)
endif

pastel_gtest_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS) -static

nodist_pastel_gtest_SOURCES = $(GENERATED_GTEST_FILES)

$(pastel_gtest_SOURCES): $(GENERATED_GTEST_FILES)
pastel-gtest_check: pastel-gtest FORCE
	./pastel-gtest

pastel-gtest-expected-failures: pastel-gtest FORCE
	./pastel-gtest --gtest_filter=*DISABLED_* --gtest_also_run_disabled_tests

%.raw.h: %.raw
	@$(MKDIR_P) $(@D)
	@echo "namespace alert_tests{" > $@
	@echo "static unsigned const char $(*F)[] = {" >> $@
	@$(HEXDUMP) -v -e '8/1 "0x%02x, "' -e '"\n"' $< | $(SED) -e 's/0x  ,//g' >> $@
	@echo "};};" >> $@
	@echo "Generated $@"

%.json.h: %.json
	@$(MKDIR_P) $(@D)
	@echo "namespace json_tests{" > $@
	@echo "static unsigned const char $(*F)[] = {" >> $@
	@$(HEXDUMP) -v -e '8/1 "0x%02x, "' -e '"\n"' $< | $(SED) -e 's/0x  ,//g' >> $@
	@echo "};};" >> $@
	@echo "Generated $@"
