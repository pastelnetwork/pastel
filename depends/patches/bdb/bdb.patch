--- a/src/dbinc/win_db.h	2020-05-29 13:58:22.000000000 -0400
+++ b/src/dbinc/win_db.h	2022-05-23 23:34:10.422023700 -0400
@@ -53,7 +53,7 @@
 #include <windows.h>
 #include <winsock2.h>
 #ifndef DB_WINCE
-#include <WinIoCtl.h>
+#include <winioctl.h>
 #endif
 
 #ifdef HAVE_GETADDRINFO
--- a/src/db/db_vrfy.c	2020-05-29 13:58:22.000000000 -0400
+++ b/src/db/db_vrfy.c	2022-05-26 16:46:39.770380900 -0400
@@ -2373,7 +2373,7 @@
 	env = dbp->env;
 
 	if (himarkp == NULL) {
-		__db_msg(env, "Page %lu index has no end.", pgno);
+		__db_msg(env, "Page %u index has no end.", pgno);
 		return (DB_VERIFY_FATAL);
 	}
 	inp = P_INP(dbp, h);
--- a/src/db/partition.c	2020-05-29 13:58:22.000000000 -0400
+++ b/src/db/partition.c	2022-05-26 16:55:09.100863600 -0400
@@ -596,7 +596,7 @@
 	if (meta->nparts > 10000) {
 		ret = USR_ERR(env, EINVAL);
 		__db_errx(env, DB_STR_A("5553",
-			"Too many partitions %lu", "%lu"), meta->nparts);
+			"Too many partitions %u", "%u"), meta->nparts);
 		goto err;
 	}
 
@@ -765,7 +765,7 @@
 				goto err;
 			if (last_pgno > 1)
 				last_pgno--;
-			dsize = last_pgno * pgsize;
+			dsize = (size_t)last_pgno * pgsize;
 		}
 		dsize = DB_ALIGN(dsize, 1024);
 
--- a/src/env/env_failchk.c	2020-05-29 13:58:22.000000000 -0400
+++ b/src/env/env_failchk.c	2022-05-26 16:56:35.886651000 -0400
@@ -251,7 +251,7 @@
 	 * Allow for the worst case number of configured thread control blocks,
 	 * plus 25%; then subtract the number of threads already allowed for.
 	 */
-	count = env->thr_nbucket * dbenv->thr_max;
+	count = (size_t)env->thr_nbucket * dbenv->thr_max;
 	if (count < dbenv->thr_init)
 		count = dbenv->thr_init;
 	count += count / 4;
--- a/src/mp/mp_backup.c	2020-05-29 13:58:22.000000000 -0400
+++ b/src/mp/mp_backup.c	2022-05-26 16:58:28.108059900 -0400
@@ -162,7 +162,7 @@
 		high_pgno = pgno + write_size - 1;
 		if (high_pgno > last_pgno)
 			high_pgno = last_pgno;
-		len = ((high_pgno - pgno) + 1) * mfp->pagesize;
+		len = (size_t)((high_pgno - pgno) + 1) * mfp->pagesize;
 #ifndef HAVE_ATOMICFILEREAD
 		if (ip != NULL)
 			ip->dbth_state = THREAD_ACTIVE;
--- a/src/mp/mp_region.c	2020-05-29 13:58:22.000000000 -0400
+++ b/src/mp/mp_region.c	2022-05-26 17:02:19.482382000 -0400
@@ -307,7 +307,7 @@
 	 * number of buckets.
 	 */
 no_prealloc:
-	mtx_base += reginfo_off * mp_mtxcount;
+	mtx_base += (db_mutex_t)reginfo_off * mp_mtxcount;
 
 	/* Allocate hash table space and initialize it. */
 	if ((ret = __env_alloc(infop,
--- a/src/txn/txn_stat.c	2020-05-29 13:58:22.000000000 -0400
+++ b/src/txn/txn_stat.c	2022-05-26 17:03:37.759571800 -0400
@@ -84,7 +84,7 @@
 	maxtxn = region->curtxns;
 	nbytes = sizeof(DB_TXN_STAT) + sizeof(DB_TXN_ACTIVE) * maxtxn;
 	/* Allocate enough space for each txn to be affecting slices too. */
-	nbytes += maxtxn * env->dbenv->slice_cnt * sizeof(DB_TXN_ACTIVE_SLICE);
+	nbytes += (size_t)maxtxn * env->dbenv->slice_cnt * sizeof(DB_TXN_ACTIVE_SLICE);
 	if ((ret = __os_umalloc(env, nbytes, &stats)) != 0) {
 		TXN_SYSTEM_UNLOCK(env);
 		return (ret);
